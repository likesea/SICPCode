#lang racket
(require "enumerate-interval.rkt")
(require "nested-map.rkt")
(define (unique-three-pair n)
  (map (lambda (i)
         (map (lambda (j)
                (map (lambda (k) (list i j k))
                     (enumerate-interval 1 (- j 1))))
                (enumerate-interval 1 (- i 1))))
       (enumerate-interval 1 n)))
(define (unique-trips n)
 (flatmap (lambda (i)
            (map (lambda (j)
                   (cons i j))
                 (unique-pairs (- i 1))))
          (enumerate-interval 1 n)))

(define (filter-triples? sum triple)
  (= sum
     (+ (car triple)
        (cadr triple)
        (caddr triple))))
(define (triple-sum sum n)
  (filter (lambda (triple)
            (filter-triples? sum triple))
   (unique-trips n)))